package ga.ozli.projects.flexiblemodsdotgroovy

import ga.ozli.projects.flexiblemodsdotgroovy.frontend.PropertyInterceptor
import groovy.transform.CompileStatic
import groovy.transform.stc.ClosureParams
import groovy.transform.stc.SimpleType

import static groovy.lang.Closure.DELEGATE_FIRST
import static groovy.lang.Closure.DELEGATE_ONLY
/**
 * The general idea of the new FlexibleModsDotGroovy is to allow for more flexibility through the use of plugins.
 *
 * There are three layers in this new system:
 * 1) This core layer (ModsDotGroovyCore), which is the base layer that all other layers are built on top of.
 * 2) Plugins (e.g. ModsDotGroovyForge), which extend the core layer to add new functionality.
 * 3) The actual MDG script frontend (ModsDotGroovy), which is the layer that the user interacts with, handled by the Gradle plugin.
 *
 * The core layer is responsible for:
 * - Holding the Map data
 * - Providing basic validation that can be customized by plugins
 * - Providing reasonable defaults for the data
 * - Providing shared data types that would theoretically otherwise be implemented by all plugins themselves
 *
 * The plugins are responsible for:
 * - Adding new functionality to the core layer
 * - Changing the defaults from the core layer (e.g. changing the default modLoader to forge)
 * - Adding new validation logic and/or changing the existing core validation logic
 *
 * The frontend is responsible for:
 * - Providing the user with a DSL to interact with the lower levels
 * - Has its mappings dynamically generated by the Gradle plugin
 *     - This prevents the user being given code completions for things that are irrelevant for their use-case, such as
 *       Quilt-specific data when they're only using Forge
 *     - It also allows new plugins to show up in code completions with IDE support without requiring it to be merged
 *       upstream into the ModsDotGroovy repo itself
 */

/**
 * This is the frontend layer
 */
@CompileStatic
class ModsDotGroovy implements PropertyInterceptor {
    ModsDotGroovyCore core = new ModsDotGroovyCore()

//    @CompileDynamic
//    void methodMissing(String name, @Nullable def args) {
//        println "[Frontend] methodMissing(name: $name, args: $args)"
//        core.data."$name" = args
//    }

    /**
     * The name of the mod loader type to load - for regular Java FML @Mod mods it should be {@code javafml}.
     * For GroovyModLoader @GMod mods it should be {@code gml}.
     */
    String modLoader = "javafml"

    void mods(@DelegatesTo(value = ModsBuilder, strategy = DELEGATE_ONLY)
              @ClosureParams(value = SimpleType, options = 'ga.ozli.projects.flexiblemodsdotgroovy.ModsBuilder') final Closure closure) {
        println "[Frontend] mods(closure)"
        core.push('mods')
        final modsBuilder = new ModsBuilder(core)
        closure.resolveStrategy = DELEGATE_ONLY
        closure.delegate = modsBuilder
        closure.call(modsBuilder)
        core.pop()
    }

    static synchronized ModsDotGroovy make(@DelegatesTo(value = ModsDotGroovy, strategy = DELEGATE_FIRST) final Closure closure) {
        final ModsDotGroovy val = new ModsDotGroovy()
        closure.resolveStrategy = DELEGATE_FIRST
        closure.delegate = val
        closure.call(val)
        return val
    }






    /**
     * This is the toString()'ed data currently outputted from ModsDotGroovy.make() (before FlexibleModsDotGroovy)
     */
//    protected Map currentData = [
//            modLoader: 'gml',
//            loaderVersion: '[1,)',
//            license: 'MIT',
//            mods: [
//                    [
//                            modId: 'no',
//                            version: 1.190,
//                            displayName: 'No',
//                            updateJsonUrl: null,
//                            displayUrl: null,
//                            credits: 'hello_world',
//                            logoFile: null,
//                            description: '',
//                            authors: 'Matyrobbrt and Paint_Ninja'
//                    ]
//            ],
//            dependencies: [
//                    no: [
//                            [
//                                    mandatory:true,
//                                    versionRange: '[1.1,)',
//                                    ordering: 'AFTER',
//                                    side: 'BOTH',
//                                    modId: 'patchouli'
//                            ],
//                            [
//                                    mandatory:true,
//                                    versionRange: '[1.0.1,)',
//                                    ordering: 'NONE',
//                                    side: 'CLIENT',
//                                    modId: 'dynamic_asset_generator'
//                            ],
//                            [
//                                    mandatory:true,
//                                    versionRange:'[43.0.0,)',
//                                    ordering:NONE,
//                                    side:BOTH,
//                                    modId:forge
//                            ],
//                            [
//                                    mandatory:true,
//                                    versionRange:'[1.19,1.20)',
//                                    ordering:NONE,
//                                    side:BOTH,
//                                    modId:minecraft
//                            ]
//                    ]
//            ],
//            modproperties: [
//                    no: [
//                            customProperty: hello
//                    ]
//            ]
//    ]
}
