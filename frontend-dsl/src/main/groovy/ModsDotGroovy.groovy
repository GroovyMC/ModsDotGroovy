import groovy.transform.CompileStatic
import groovy.transform.stc.ClosureParams
import groovy.transform.stc.SimpleType
import groovy.util.logging.Log4j2
import io.github.groovymc.modsdotgroovy.frontend.MapClosureInterceptor
import io.github.groovymc.modsdotgroovy.frontend.ModInfoBuilder
import io.github.groovymc.modsdotgroovy.frontend.ModsBuilder
import io.github.groovymc.modsdotgroovy.frontend.ModsDotGroovyFrontend
import io.github.groovymc.modsdotgroovy.frontend.PropertyInterceptor
import org.jetbrains.annotations.Nullable

/**
 * The general idea of the new FlexibleModsDotGroovy is to allow for more flexibility through the use of plugins.
 *
 * There are three layers in this new system:
 * 1) This core layer (ModsDotGroovyCore), which is the base layer that all other layers are built on top of.
 * 2) Plugins (e.g. ModsDotGroovyForge), which extend the core layer to add new functionality.
 * 3) The actual MDG script frontend (ModsDotGroovy), which is the layer that the user interacts with, handled by the Gradle plugin.
 *
 * The core layer is responsible for:
 * - Holding the rootMap Map
 * - Providing basic validation that can be customized by plugins
 * - Providing reasonable defaults for the rootMap
 * - Providing shared data types that would theoretically otherwise be implemented by all plugins themselves
 *
 * The plugins are responsible for:
 * - Adding new functionality to the core layer
 * - Changing the defaults from the core layer (e.g. changing the default modLoader to forge)
 * - Adding new validation logic and/or changing the existing core validation logic
 *
 * The frontend is responsible for:
 * - Providing the user with a DSL to interact with the lower levels
 * - Has its mappings dynamically generated by the Gradle plugin
 *     - This prevents the user being given code completions for things that are irrelevant for their use-case, such as
 *       Quilt-specific rootMap when they're only using Forge
 *     - It also allows new plugins to show up in code completions with IDE support without requiring it to be merged
 *       upstream into the ModsDotGroovy repo itself
 */

/**
 * This is the frontend layer
 */
@CompileStatic
@Log4j2(category = 'MDG - Frontend')
class ModsDotGroovy extends ModsDotGroovyFrontend implements PropertyInterceptor, MapClosureInterceptor {
    /**@
     * If running in a Gradle environment, this will be populated with the {@code build.properties}.
     */
    public final Map<String, ?> buildProperties = [:]

    /**@
     * The name of the mod loader type to load - for regular Java FML @Mod mods it should be {@code javafml}.
     * For GroovyModLoader @GMod mods it should be {@code gml}.
     */
    String modLoader = 'javafml'

    /**@
     * A version range to match for the {@link #setModLoader(java.lang.String)}.
     */
    String loaderVersion = '[1,)'

    /**@
     * The license for your mod. This is mandatory metadata and allows for easier comprehension of your redistributive properties.<br>
     * Review your options at <a href="https://choosealicense.com/">https://choosealicense.com/</a>.<br>
     * All rights reserved is the default copyright stance, and is thus the default here.
     */
    String license = 'All Rights Reserved'

    /**@
     * A URL to refer people to when problems occur with this mod.
     */
    @Nullable String issueTrackerUrl = null

    /**@
     * Alias for <code>mods { modInfo {} }</code>
     * @param closure
     */
    void mod(@DelegatesTo(value = ModInfoBuilder, strategy = Closure.DELEGATE_FIRST)
             @ClosureParams(value = SimpleType, options = 'io.github.groovymc.modsdotgroovy.frontend.ModInfoBuilder')
             final Closure closure) {
        mods { modInfo(closure) }
    }

    void mods(@DelegatesTo(value = ModsBuilder, strategy = Closure.DELEGATE_FIRST)
              @ClosureParams(value = SimpleType, options = 'io.github.groovymc.modsdotgroovy.frontend.ModsBuilder')
              final Closure closure) {
        log.debug "mods(closure)"
        core.push('mods')
        final modsBuilder = new ModsBuilder(core)
        closure.resolveStrategy = Closure.DELEGATE_FIRST
        closure.delegate = modsBuilder
        closure.call(modsBuilder)
        core.pop()
    }

    @SuppressWarnings('GroovyUnusedDeclaration') // Used by the Groovy compiler for coercing an implicit `it` closure
    ModsDotGroovy() {
        super([:])
    }

    private ModsDotGroovy(final Map<String, ?> environment) {
        super(environment)
        if (environment.containsKey('buildProperties'))
            this.@buildProperties.putAll(environment.buildProperties as Map<String, ?>)
    }

    static ModsDotGroovy make(@DelegatesTo(value = ModsDotGroovy, strategy = Closure.DELEGATE_FIRST)
                              @ClosureParams(value = SimpleType, options = 'ModsDotGroovy') final Closure closure) {
        return make(closure, [:])
    }

    static ModsDotGroovy make(@DelegatesTo(value = ModsDotGroovy, strategy = Closure.DELEGATE_FIRST)
                              @ClosureParams(value = SimpleType, options = 'ModsDotGroovy') final Closure closure,
                              final Binding scriptBinding) {
        return make(closure, scriptBinding.variables)
    }

    static ModsDotGroovy make(@DelegatesTo(value = ModsDotGroovy, strategy = Closure.DELEGATE_FIRST)
                              @ClosureParams(value = SimpleType, options = 'ModsDotGroovy') final Closure closure,
                              final Map<String, ?> environment) {
        final ModsDotGroovy val = new ModsDotGroovy(environment)
        closure.resolveStrategy = Closure.DELEGATE_FIRST
        closure.delegate = val
        closure.call(val)
        return val
    }

    /**
     * This is the toString()'ed rootMap currently outputted from ModsDotGroovy.make() (before FlexibleModsDotGroovy)
     */
//    protected Map currentData = [
//            modLoader: 'gml',
//            loaderVersion: '[1,)',
//            license: 'MIT',
//            mods: [
//                    [
//                            modId: 'no',
//                            version: 1.190,
//                            displayName: 'No',
//                            updateJsonUrl: null,
//                            displayUrl: null,
//                            credits: 'hello_world',
//                            logoFile: null,
//                            description: '',
//                            authors: 'Matyrobbrt and Paint_Ninja'
//                    ]
//            ],
//            dependencies: [
//                    no: [
//                            [
//                                    mandatory:true,
//                                    versionRange: '[1.1,)',
//                                    ordering: 'AFTER',
//                                    side: 'BOTH',
//                                    modId: 'patchouli'
//                            ],
//                            [
//                                    mandatory:true,
//                                    versionRange: '[1.0.1,)',
//                                    ordering: 'NONE',
//                                    side: 'CLIENT',
//                                    modId: 'dynamic_asset_generator'
//                            ],
//                            [
//                                    mandatory:true,
//                                    versionRange:'[43.0.0,)',
//                                    ordering:NONE,
//                                    side:BOTH,
//                                    modId:forge
//                            ],
//                            [
//                                    mandatory:true,
//                                    versionRange:'[1.19,1.20)',
//                                    ordering:NONE,
//                                    side:BOTH,
//                                    modId:minecraft
//                            ]
//                    ]
//            ],
//            modproperties: [
//                    no: [
//                            customProperty: hello
//                    ]
//            ]
//    ]
}
